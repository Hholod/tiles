<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Memory Game</title>
<style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-image: url('background.jpg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: fixed;
  }
  .grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-gap: 10px;
    width: 80%;
    max-width: 960px;
  }
  .tile {
    background-image: url('tile_image.jpg');
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    width: 20vw;
    height: 20vw;
    max-width: 180px;
    max-height: 180px;
    cursor: pointer;
    perspective: 1000px;
    transition: transform 0.6s;
    display: flex;
    justify-content: center;
    align-items: center;
    border: solid 2px #ddd;
    position: relative;
  }
  .flipper {
    width: 100%;
    height: 100%;
    transition: transform 0.6s;
    transform-style: preserve-3d;
    position: relative;
  }
  .tile.revealed .flipper {
    transform: rotateY(180deg);
  }
  .face {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }
  .front {
    background-color: url('tile_image.jpg');
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
  }
  .back {
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    transform: rotateY(180deg);
  }
  /* Sparkle effect styles */
  @keyframes sparkle {
      0%, 100% { opacity: 0; transform: scale(0); }
      50% { opacity: 1; transform: scale(1); }
  }
  .sparkle-effect {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
      pointer-events: none;
  }
  .sparkle-effect::before, .sparkle-effect::after {
      position: absolute;
  content: 'âœ¨';
  font-size: 30px; /* Adjust size as needed */
  color: #fff; /* Adjust sparkle color as needed */
  animation: sparkle 1s ease-in-out infinite;
  }
  .sparkle-effect::after {
      animation-delay: 0.5s;  /* Stagger the animations for a continuous effect */
  }
</style>
</head>
<body>
<div class="grid">
  <!-- Tiles are generated by JavaScript -->
</div>
<script>
  const grid = document.querySelector('.grid');
  const pairs = 8; // 8 pairs for a 4x4 grid
  const images = Array.from({length: 8}, (_, i) => `${i + 1}.jpg`);
  let selections = [];

  function generateTiles() {
    let tiles = [];
    for (let i = 0; i < pairs; i++) {
      tiles.push(images[i], images[i]);
    }
    tiles.sort(() => Math.random() - 0.5);
    return tiles;
  }

  function createTileElement(imageSrc) {
    const tile = document.createElement('div');
    tile.className = 'tile';
    const flipper = document.createElement('div');
    flipper.className = 'flipper';

    const frontFace = document.createElement('div');
    frontFace.className = 'face front';

    const backFace = document.createElement('div');
    backFace.className = 'face back';
    backFace.style.backgroundImage = `url('${imageSrc}')`;

    flipper.appendChild(frontFace);
    flipper.appendChild(backFace);
    tile.appendChild(flipper);

    return tile;
  }

  function setupGrid() {
    const tiles = generateTiles();
    tiles.forEach(imageSrc => {
      const tileElement = createTileElement(imageSrc);
      tileElement.addEventListener('click', () => handleTileClick(tileElement, imageSrc));
      grid.appendChild(tileElement);
    });
  }

  function handleTileClick(tile, imageSrc) {
    if (tile.classList.contains('revealed') || selections.length === 2) {
      return;
    }
    tile.classList.add('revealed');
    selections.push({ tile, imageSrc });
    if (selections.length === 2) {
      const [first, second] = selections;
      if (first.imageSrc === second.imageSrc) {
        // Add sparkle effect when tiles match
        addSparkleEffect(first.tile);
        addSparkleEffect(second.tile);
        
        setTimeout(() => {
            selections = [];
        }, 5000); // Allow the sparkle effect to finish before clearing selections
      } else {
        setTimeout(() => {
            first.tile.classList.remove('revealed');
            second.tile.classList.remove('revealed');
            selections = [];
        }, 1000);
      }
    }
  }

function addSparkleEffect(tile) {
    const numberOfSparkles = 7; // Total number of sparkles to add
    for (let i = 0; i < numberOfSparkles; i++) {
        let sparkleDiv = document.createElement('div');
        sparkleDiv.className = 'sparkle-effect';
        // Apply random position within the tile
        sparkleDiv.style.top = `${Math.random() * 80 + 10}%`; // Random top position between 10% to 90%
        sparkleDiv.style.left = `${Math.random() * 80 + 10}%`; // Random left position between 10% to 90%

        // Randomize some properties for each sparkle
        sparkleDiv.style.animationDelay = `${Math.random() * 0.5}s`; // Random delay
        sparkleDiv.style.opacity = `${0.5 + Math.random() * 0.5}`; // Random opacity between 0.5 and 1
        sparkleDiv.style.transform = `scale(${0.5 + Math.random() * 1.5})`; // Random scale between 0.5 and 2
        tile.appendChild(sparkleDiv);
    }

    setTimeout(() => {
        const sparkles = tile.getElementsByClassName('sparkle-effect');
        while (sparkles[0]) {
            sparkles[0].parentNode.removeChild(sparkles[0]);
        }
    }, 5000); // Remove all sparkles after 5 seconds
}

  setupGrid();
</script>
</body>
</html>
